#!/bin/bash

#**
#*Signature
#*https://www.youtube.com/watch?v=0SkZSE4yi18&t=1773s
#**

#**
#*Global variable
#**
SWD=${0%/*};
MAIN_DOMAIN="scriptcraft.fun";
SUBDOMAINS=(
    "dev.scriptcraft.fun" 
    "stg.scriptcraft.fun"
    );
ROOT_PASSWORD="root555";
ADMINER_PASSWORD="rokit555";
AUTH_PASS_PMA="rokit555!!!";
INSTALL_SSL="yes";
ADMIN_EMAIL="scriptcraft.site@gmail.com";
IP=$(wget -qO- ifconfig.me);
HIDDEN_URI_PMA=$(head -c 100 /dev/urandom | base64 | sed 's/[+=/A-Z]//g' | tail -c 9);

#**
#*Start check
#**
if [[ $(id -u) -ne 0 ]];
then
    echo -e "\n You are not adminer. \n Run the command sudo -i (or sudo bash $0). \n Enter you password for current user. \n And start this script again.\n $0\n";
    exit 1;
fi

declare -A check_release;
check_release["dist_name"]="false";
check_release["version"]="false";

while read string; do
    IFS="=" read name value <<< "$string";
    value=${value//\"/};

    if [[ $name == "NAME" && $value == "Ubuntu" ]]; then
        check_release["dist_name"]="true";
    fi

    if [[ $name == "VERSION_ID" && $value == "22.04" ]]; then
        check_release["version"]="true";
    fi
done < /etc/os-release

if [[ "false" == ${check_release["dist_name"]} || "false" == ${check_release["version"]} ]]; then
    echo -e "The script has not been tested for your distribution and/or its version.\nThe script is designed for Ubuntu 20.04.";
    exit 1;
fi

#**
#*Functions helpers
#**
good_print(){
    if [[ "" == $1 ]]; then
        echo -e "The function expects a string in the first parameter \n";
        return 1;
    fi
    GREEN="\e[32m";
    ENDCOLOR="\e[0m";
    echo -e "${GREEN}$1${ENDCOLOR}";
    return 0;
}

bad_print(){
    if [[ "" == $1 ]]; then
        echo -e "The function expects a string in the first parameter \n";
        return 1;
    fi
    RED="\e[31m";
    ENDCOLOR="\e[0m";
    echo -e "${RED}$1${ENDCOLOR}";
    return 0;
}

get_approval(){
    good_print "Are you ready to continue? yes: Y or y,  no: N or n";
    read response;
    if [[ $response == "N" || $response == "n"  ]]; then
        message="Do you want to interrupt the installation? yes: Y or y,  no: N or n";
        bad_print "$message";
        read response;
        if [[ $response == "Y" || $response == "y"  ]]; then
            exit 1;
        fi
    fi
    return 0;
}

#**
#*Functions actions
#**
zero_step(){
    good_print "***ZERO STEP***";
    sleep 3;
    sed -i "/#\$nrconf{restart} = 'i';/s/.*/\$nrconf{restart} = 'a';/" /etc/needrestart/needrestart.conf;
    apt-get -y update;
    apt-get -y upgrade;
    apt-get -y install -y vim mosh tmux htop git curl wget unzip zip gcc build-essential make;
    good_print "Step 0 [Zero step].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_nginx(){
    good_print "***INSTALL NGINX***";
    sleep 3;

    apt-get -y install nginx;
    if [[ 0 != $? ]]; then
        bad_print "install nginx failed";
        return 1;
    fi
    systemctl enable nginx;
    systemctl stop nginx;
    good_print "Step 1 [Install nginx].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_apache(){
    good_print "***INSTALL APACHE2***";
    sleep 3;
    apt-get -y install apache2;
    if [[ 0 != $? ]]; then
        bad_print "install apach2 failed";
        return 1;
    fi
    
    systemctl stop apache2;
    good_print "Step 2 [Install apache2].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

configuration_ufw(){
    good_print "***CONFIGURATION UFW***";
    sleep 3;
    ufw allow 'Nginx HTTP';
    if [[ "yes" == $INSTALL_SSL ]]; then 
        ufw allow 'Nginx HTTPS';
    fi    
    ufw allow in "OpenSSH";
    ufw_status=$(ufw status);

    if [[ $ufw_status != *"Status: active"* ]]; then
        good_print "To this question (Command may disrupt existing ssh connections. Proceed with operation (y|n)?) you can answer yes (y)";
        sleep 5;
        ufw enable;
    fi
    ufw status;
    good_print "Step 3 [Configuration UFW].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

nginx_health_check(){
    good_print "***NGINX HEALTTH CHEACK***";
    sleep 3;
    systemctl start nginx;
    good_print "At this stage you can check the Apache. Make a request from the browser or through curl http://ip_addr:port or http://$MAIN_DOMAIN:port You should see the start page and the Apache server.";
    get_approval;
    good_print "Step 4 [Nginx health check].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_mysql(){
    good_print "***INSTALL MYSQL***";
    sleep 3;
    apt -y install mysql-server;
    if [[ 0 != $? ]]; then
        bad_print "install mysql failed";
        return 1;
    fi

    good_print "The database is installed correctly.";
    good_print "Now you need to enter the preparation for running the security script.";
    good_print "Enter this command in the Mysql monitor.";
    good_print "1. ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${ROOT_PASSWORD}';";
    good_print "2. exit;";
    good_print "Remember to replace the word PASSWORD with your password";
    get_approval;
    mysql 2> /dev/null;

    good_print "Weâ€™re about to launch a security breach.";
    good_print "1. Enter the password you set for the root user in the previous step.";
    good_print "2. Plugin validation of your password is optional. That is the answer - N";
    good_print "3. If you are satisfied with the previously installed password for the root user, you do not need to change it. That is the answer - N":
    good_print "4. Anonymous user should be removed. That is the answer - Y";
    good_print "5. It is recommended to deny remote access. That is, the answer is - Y";
    good_print "6. The test database is better to delete. That is the answer - Y";
    good_print "7. It is recommended to reset all starting privileges. That is the answer - Y";

    get_approval;
    mysql_secure_installation;

    good_print "Next, we need to create a new Mysql user.";
    good_print "To do this, run the following commands in Mysql Monitor.";
    good_print "1. CREATE USER 'adminer'@'localhost' IDENTIFIED WITH mysql_native_password BY '${ADMINER_PASSWORD}';";
    good_print "2. GRANT ALL PRIVILEGES ON *.* TO 'adminer'@'localhost' WITH GRANT OPTION;";
    good_print "3. exit;"
    good_print "Don't forget to replace the word password with a password that suits you.";
    get_approval;
    mysql -u root -p${ROOT_PASSWORD};
    good_print "Step 5 [install Mysql].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_php(){
    good_print "***INSTALL PHP***";
    sleep 3;
    apt-get -y install php-fpm php-mysql;
    if [[ 0 != $? ]]; then
        bad_print "install php libapache2-mod-php php-mysql failed";
        return 1;
    fi

    apt-get -y install php-curl php-json php-cgi php-gd php-zip php-mbstring php-xml php-xmlrpc;
    if [[ 0 != $? ]]; then
        bad_print "install php-curl php-json php-cgi php-gd php-zip php-mbstring php-xml php-xmlrpc failed";
        return 1;
    fi
    systemctl start apache2;
    a2enmod proxy_fcgi setenvif;
    a2enconf php*.*-fpm;
    systemctl enable apache2;
    systemctl restart apache2;

    good_print "Step 6 [install PHP].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

create_proxymodule(){
    good_print "***CREATE PROXYMODULE***";
    sleep 3;
    touch "/etc/nginx/proxymodule";
    cat << EOF > "/etc/nginx/proxymodule"
location / {
    proxy_pass         http://127.0.0.1:81;
    proxy_redirect     off;
    proxy_set_header   Host             \$host;
    proxy_set_header   X-Real-IP        \$remote_addr;
    proxy_set_header   X-Forwarded-For  \$proxy_add_x_forwarded_for;
    client_max_body_size       200m;
    client_body_buffer_size    512k;
    proxy_connect_timeout      600;
    proxy_send_timeout         600;
    proxy_read_timeout         600;
    proxy_buffer_size          4k;
    proxy_buffers              4 32k;
    proxy_busy_buffers_size    64k;
    proxy_temp_file_write_size 64k;
}
EOF
    good_print "Step 7 [Create proxymodule].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

create_main_domain(){
    good_print "***CREATE MAIN DOMAIN***";
    sleep 3;

    mkdir "/var/www/${MAIN_DOMAIN}";
    touch "/etc/nginx/sites-available/${MAIN_DOMAIN}.conf";
    cat << EOF > "/etc/nginx/sites-available/${MAIN_DOMAIN}.conf"
server {
    listen 80;

    root /var/www/${MAIN_DOMAIN};

    index index.php index.html;

    server_name ${MAIN_DOMAIN};

    error_log /var/log/nginx/${MAIN_DOMAIN}.error.log;
    access_log /var/log/nginx/${MAIN_DOMAIN}.access.log;

    location ~* ^.+\.(jpg|jpeg|gif|png|ico|zip|gz|rar|bz2|xls|html|exe|pdf|txt|wav|bmp|js|swf|css|xml)$ {
        root /var/www/${MAIN_DOMAIN};
    }
    include /etc/nginx/proxymodule;

}
EOF

    files=$(ls /var/run/php/);
    for file in $files; do
        type=$(file /var/run/php/$file);
        type=${type#*: };
        if [[ "socket" == $type ]]; then
            php_fpm_sock=$file;
        fi
    done

cat << EOF > "/etc/apache2/sites-available/$MAIN_DOMAIN.conf"
<VirtualHost *:81>
    ServerName $MAIN_DOMAIN
    ServerAlias www.$MAIN_DOMAIN
    ServerAdmin $ADMIN_EMAIL
    DocumentRoot /var/www/$MAIN_DOMAIN
    ErrorLog \${APACHE_LOG_DIR}/${MAIN_DOMAIN}_error.log
    CustomLog \${APACHE_LOG_DIR}/${MAIN_DOMAIN}_access.log combined

    <FilesMatch \.php$>
        SetHandler "proxy:unix:/var/run/php/${php_fpm_sock}|fcgi://localhost/"

        # Else we can just use a tcp socket:
        #SetHandler "proxy:fcgi://127.0.0.1:9000"
    </FilesMatch>

    <Directory /var/www/$MAIN_DOMAIN>
        Require all granted
        AllowOverride All
    </Directory>

</VirtualHost>
EOF

    ln -s /etc/nginx/sites-available/${MAIN_DOMAIN}.conf /etc/nginx/sites-enabled/;
    unlink /etc/nginx/sites-enabled/default;
    systemctl reload nginx;
    nginx -t;

    a2ensite "$MAIN_DOMAIN.conf";
    apache2ctl configtest;

    sed -i 's/include \/etc\/nginx\/sites-enabled\/\*/include \/etc\/nginx\/sites-enabled\/*.conf/' /etc/nginx/nginx.conf;  
    systemctl reload nginx;
    good_print "Step 8 [Create main domain].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

create_sub_domain(){
    if [ -z ${SUBDOMAINS} ]; then
        return 1;
    else
        if [[ 0 < ${#SUBDOMAINS[@]} ]]; then 
            good_print "***CREATE SUB DOMAIN***";
            sleep 3;
        else
            return 1;    
        fi    
    fi

    files=$(ls /var/run/php/);
    for file in $files; do
        type=$(file /var/run/php/$file);
        type=${type#*: };
        if [[ "socket" == $type ]]; then
            php_fpm_sock=$file;
        fi
    done

    for subdomain in ${SUBDOMAINS[*]}; do 
        mkdir "/var/www/$subdomain";
        touch "/etc/apache2/sites-available/$subdomain.conf";
        cat << EOF > "/etc/apache2/sites-available/$subdomain.conf"
<VirtualHost *:81>
    ServerName $subdomain
    ServerAlias www.$subdomain
    ServerAdmin $ADMIN_EMAIL
    DocumentRoot /var/www/$subdomain
    ErrorLog \${APACHE_LOG_DIR}/${subdomain}_error.log
    CustomLog \${APACHE_LOG_DIR}/${subdomain}_access.log combined

    <FilesMatch \.php$>
        SetHandler "proxy:unix:/var/run/php/${php_fpm_sock}|fcgi://localhost/"

        # Else we can just use a tcp socket:
        #SetHandler "proxy:fcgi://127.0.0.1:9000"
    </FilesMatch>

    <Directory /var/www/$subdomain>
        Require all granted
        AllowOverride All
    </Directory>

</VirtualHost>
EOF

        a2ensite "$subdomain.conf";
    done


    for subdomain in ${SUBDOMAINS[*]}; do 
        touch "/etc/nginx/sites-available/${subdomain}.conf";
        cat << EOF > "/etc/nginx/sites-available/${subdomain}.conf"
server {
    listen 80;

    root /var/www/${subdomain};

    index index.php index.html;

    server_name ${subdomain};

    error_log /var/log/nginx/${subdomain}.error.log;
    access_log /var/log/nginx/${subdomain}.access.log;

    location ~* ^.+\.(jpg|jpeg|gif|png|ico|zip|gz|rar|bz2|xls|html|exe|pdf|txt|wav|bmp|js|swf|css|xml)$ {
        root /var/www/${subdomain};
    }
    include /etc/nginx/proxymodule;

}
EOF

        ln -s /etc/nginx/sites-available/${subdomain}.conf /etc/nginx/sites-enabled/;
    done

    systemctl reload nginx;
    nginx -t;
    sleep 3;

    systemctl start apache2;
    apache2ctl configtest;
    good_print "Step 9 [Create sub domain].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

port_installation_for_apache(){
    good_print "***PORT INSTALLATION FOR APACHE***";
    sleep 3;
    sed -i 's/Listen 80/Listen 127.0.0.1:81/' /etc/apache2/ports.conf;
    systemctl restart apache2;
    systemctl start apache2;
    good_print "Step 10 [Port installation for apache].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

test_php(){
    good_print "***TEST PHP***";
    sleep 3;
    touch "/var/www/$MAIN_DOMAIN/info.php";
    cat << EOF > "/var/www/$MAIN_DOMAIN/info.php"
<?php
phpinfo();
EOF
    good_print "Now you can check if php is working correctly. Query http://your_ip/info.php or http://$MAIN_DOMAIN/info.php";
    get_approval;
    rm "/var/www/$MAIN_DOMAIN/info.php";
    good_print "Step 8 [Test PHP].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

test_php_and_mysql(){
    good_print "***TEST PHP AND MYSQL***";
    sleep 3;
    good_print "To verify that PHP and Mysql work together, you must do the following.";
    good_print "Create test data in the database."; 
    good_print "1. CREATE DATABASE example_database;";
    good_print "2. SHOW DATABASES;";
    good_print "3. create TABLE example_database.todo_list (item_id INT AUTO_INCREMENT,content VARCHAR(255),PRIMARY KEY(item_id));";
    good_print "4. INSERT INTO example_database.todo_list (content) VALUES ( \"My first important item is\");";
    good_print "5. SELECT * FROM example_database.todo_list;";
    good_print "6. exit";
    get_approval;
    mysql -uadminer -p${ADMINER_PASSWORD};

    touch "/var/www/$MAIN_DOMAIN/todo_list.php";
    echo -e "<?php
    \$user = 'adminer';
    \$password = '${ADMINER_PASSWORD}';
    \$database = 'example_database';
    \$table = 'todo_list';" > "/var/www/$MAIN_DOMAIN/todo_list.php";

    echo -e 'try {
      $db = new PDO("mysql:host=localhost;dbname=$database", $user, $password);
      echo "<h2>TODO</h2><ol>";
      foreach($db->query("SELECT content FROM $table") as $row) {
        echo "<li>" . $row["content"] . "</li>";
      }
      echo "</ol>";
    } catch (PDOException $e) {
        print "Error!: " . $e->getMessage() . "<br/>";
        die();
    }' >> "/var/www/$MAIN_DOMAIN/todo_list.php";

    good_print "Now you can check if php and mysql are working correctly. Query http://your_ip/todo_list.php or http://$MAIN_DOMAIN/todo_list.php";
    get_approval;
    rm "/var/www/$MAIN_DOMAIN/todo_list.php";
    good_print "Step 9 [Test PHP and MySQL].\nStatus: normal.\n";
    sleep 5;
    return 0;

}

redirect_from_ip_to_main_domain(){
    good_print "***REDIRECT FROM IP TO MAIN DOMAIN***";
    sleep 3;
    good_print "Step 10 [Redirect from ip to main domain].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_phpmyadmin(){
    good_print "***INSTALL PHPMYADMIN***";
    sleep 3;

    good_print "The installation of phpmyadmin will now be started";
    good_print "During the installation process, you will need to answer a few questions.";
    good_print "Here's a list of clues:";
    good_print "1. the system will ask you for which server to configure phpmyadmin. Just press Tab (without selecting either apache or lighttpd) and then OK.";
    good_print "2. Next, the installer will prompt to create a database for phpMyAdmin, which will contain the official information of the program and the necessary settings, you must agree to choose Yes:";
    good_print "Enter the password for the user phpmyadmin. You can use the same password as the adminer user.  Or any other password.";
    get_approval;
    apt -y install phpmyadmin;
    ln -s /usr/share/phpmyadmin /var/www/${MAIN_DOMAIN}/phpmyadmin;
    good_print "At this point, phpmyadmin is already available at http://your_ip/phpmyadmin or http://$MAIN_DOMAIN/phpmyadmin";
    get_approval;

    
    mv /var/www/${MAIN_DOMAIN}/phpmyadmin /var/www/${MAIN_DOMAIN}/${HIDDEN_URI_PMA};
    touch /tmp/LEMP_basic_22_04_report;
    echo "PHPMYADMIN - http://${MAIN_DOMAIN}/${HIDDEN_URI_PMA}" >> /tmp/LEMP_basic_22_04_report;

    touch "/etc/phpmyadmin/conf.d/pma_secure.php";
    cat << EOF > "/etc/phpmyadmin/conf.d/pma_secure.php"
<?php

# PhpMyAdmin Settings
# This should be set to a random string of at least 32 chars
\$cfg['blowfish_secret'] = 'ra8pi36bl9yk0y2xn0py45sngg3x156k';

\$i=0;
\$i++;

\$cfg['Servers'][$i]['auth_type'] = 'cookie';
\$cfg['Servers'][$i]['AllowNoPassword'] = false;
\$cfg['Servers'][$i]['AllowRoot'] = false;

?>
EOF

    crypt=$(openssl passwd $AUTH_PASS_PMA);
    touch "/etc/nginx/pma_pass";
    cat << EOF > "/etc/nginx/pma_pass"
adminer:$crypt
EOF
    systemctl reload nginx;
    good_print "Step 11 [Install_phpmyqdmin].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_wordpress_for_main_domain(){
    good_print "***INSTALL WORDPRESS FOR MAIN DOMAIN***";
    sleep 3;
    wget -P "/var/www/$MAIN_DOMAIN/" "https://wordpress.org/latest.zip";
    apt -y install unzip;
    unzip /var/www/$MAIN_DOMAIN/latest.zip -d /var/www/$MAIN_DOMAIN/;
    rm "/var/www/$MAIN_DOMAIN/latest.zip";
    mv /var/www/$MAIN_DOMAIN/wordpress/* /var/www/$MAIN_DOMAIN/;
    rm -rf "/var/www/$MAIN_DOMAIN/wordpress/";
    chown -R "root:www-data" "/var/www/";
    chmod -R "g+w" "/var/www/";
    good_print "Step 12 [Install wordpress for main domain].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_wordpress_for_sub_domain(){
    if [ -z ${SUBDOMAINS} ]; then
        return 1;
    else
        if [[ 0 < ${#SUBDOMAINS[@]} ]]; then 
            good_print "***INSTALL WORDPRESS FOR SUB DOMAIN***";
            sleep 3;
        else
            return 1;    
        fi    
    fi

    for subdomain in ${SUBDOMAINS[*]}; do
        wget -P "/var/www/$subdomain/" "https://wordpress.org/latest.zip";
        unzip /var/www/$subdomain/latest.zip -d /var/www/$subdomain/;
        rm "/var/www/$subdomain/latest.zip";
        mv /var/www/$subdomain/wordpress/* /var/www/$subdomain/;
        rm -rf "/var/www/$subdomain/wordpress/";
        chown -R "root:www-data" "/var/www/";
        chmod -R "g+w" "/var/www/";
    done
    good_print "Step 13 [Install wordpress for sub domain].\nStatus: normal.\n";
    sleep 5;
    return 0;
    #https://www.youtube.com/watch?v=VF3VvP9v0Y8
}

delete_unnecessary(){
    good_print "***DELETE UNNECESSARY***";
    sleep 3;
    rm -rf "/var/www/html";
    good_print "Step 14 [Delete unnecessary].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

#**
#*RUN
#**
install_nginx;
install_apache;
configuration_ufw;
nginx_health_check;
install_mysql;
install_php;
create_proxymodule;
create_main_domain;
create_sub_domain;
port_installation_for_apache;
test_php;
test_php_and_mysql;
redirect_from_ip_to_main_domain;
install_phpmyadmin;
install_wordpress_for_main_domain;
install_wordpress_for_sub_domain;
delete_unnecessary;

echo "
           â–„â–„â–„â–„
           â–ˆâ–‘â–‘â–ˆ
           â–ˆâ–‘â–‘â–ˆ
           â–ˆâ–‘â–‘â–‘â–ˆ
         â–ˆâ–‘â–‘â–‘â–‘â–‘â–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„â–„â–ˆâ–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„
â–“â–“â–“â–“â–“â–“â–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆ
â–“â–“â–“â–“â–“â–“â–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆ
â–“â–“scriptcraft.site â–‘â–‘â–‘â–ˆ
â–“â–“â–“â–“â–“â–“â–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆ
â–“â–“â–“â–“â–“â–“â–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆ
â–“â–“â–“â–“â–“â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€â–‘â–‘â–‘â–‘â–€â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€ ";