#!/bin/bash

#**
#*Signature
#*installing https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-22-04
#*Redirect https://eternalhost.net/base/vps-vds/nginx-redirekt
#*Phpmyadmin https://losst.pro/ustanovka-phpmyadmin-s-nginx-v-ubuntu-20-04 OR 
#*https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-phpmyadmin-with-nginx-on-an-ubuntu-20-04-server
#* Settings phpmyadmin - https://php-myadmin.ru/doc/config/
#*Install vsftpd https://www.digitalocean.com/community/tutorials/how-to-set-up-vsftpd-for-a-user-s-directory-on-ubuntu-20-04
#**

#**
#*Global variable
#**
#system user
SYSTEM_USER_NAME="adminer";
SYSTEM_USER_PASSWORD="lalaland";

#server
MAIN_DOMAIN="scriptcraft.space";
SUBDOMAINS=(
    "dev.scriptcraft.space" 
    "stg.scriptcraft.space"
    );

#mysql    
MYSQL_ROOT_PASSWORD="root555";
MYSQL_ADMIN_USER="adminer";
MYSQL_ADMIN_PASSWORD="lalaland";

#phpmyadmin
PMA_ADMIN_USER="adminer";
PMA_AUTH_PASS="lalaland";
PMA_HIDDEN_URI=$(head -c 100 /dev/urandom | base64 | sed 's/[+=/A-Z]//g' | tail -c 9);

#wordpress
WP_SITE_TITLE="TEST";
WP_ADMIN_USER="adminer";
WP_ADMIN_PASSWORD="lalaland";
WP_ADMIN_EMAIL="scriptcraft.site@gmail.com";
WP_DB_PREFIX="wp_";
WP_SITE_DESCRIPTION="My tets site";
WP_PERMALINK_STRUCTURE="/%postname%/";
WP_THEME_NAME="twentytwentyone";

#zabbix
ZABBIX_PASSWORD="lalaland";


#other
SWD=${0%/*};
INSTALL_SSL="yes";
IP=$(wget -qO- ifconfig.me);


#**
#*Start check
#**
if [[ $(id -u) -ne 0 ]];
then
    echo -e "\n You are not adminer. \n Run the command sudo -i (or sudo bash $0). \n Enter you password for current user. \n And start this script again.\n $0\n";
    exit 1;
fi

declare -A check_release;
check_release["dist_name"]="false";
check_release["version"]="false";

while read string; do
    IFS="=" read name value <<< "$string";
    value=${value//\"/};

    if [[ $name == "NAME" && $value == "Ubuntu" ]]; then
        check_release["dist_name"]="true";
    fi

    if [[ $name == "VERSION_ID" && $value == "22.04" ]]; then
        check_release["version"]="true";
    fi
done < /etc/os-release

if [[ "false" == ${check_release["dist_name"]} || "false" == ${check_release["version"]} ]]; then
    echo -e "The script has not been tested for your distribution and/or its version.\nThe script is designed for Ubuntu 20.04.";
    exit 1;
fi

#**
#*Functions helpers
#**
good_print(){
    if [[ "" == $1 ]]; then
        echo -e "The function expects a string in the first parameter \n";
        return 1;
    fi
    GREEN="\e[32m";
    ENDCOLOR="\e[0m";
    echo -e "${GREEN}$1${ENDCOLOR}";
    return 0;
}

bad_print(){
    if [[ "" == $1 ]]; then
        echo -e "The function expects a string in the first parameter \n";
        return 1;
    fi
    RED="\e[31m";
    ENDCOLOR="\e[0m";
    echo -e "${RED}$1${ENDCOLOR}";
    return 0;
}

get_approval(){
    good_print "Are you ready to continue? yes: Y or y,  no: N or n";
    read response;
    if [[ $response == "N" || $response == "n"  ]]; then
        message="Do you want to interrupt the installation? yes: Y or y,  no: N or n";
        bad_print "$message";
        read response;
        if [[ $response == "Y" || $response == "y"  ]]; then
            exit 1;
        fi
    fi
    return 0;
}

#**
#*Functions actions
#**
zero_step(){
    good_print "***ZERO STEP***";
    sleep 3;
    sed -i "/#\$nrconf{restart} = 'i';/s/.*/\$nrconf{restart} = 'a';/" /etc/needrestart/needrestart.conf;
    apt-get -y update;
    apt-get -y upgrade;
    apt-get -y install -y vim mosh tmux htop git curl wget unzip zip gcc build-essential make;
    good_print "Step 0 [Zero step].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

create_user(){
    good_print "***CREATE USER***";
    sleep 3;
    useradd -s /bin/bash -d /home/$SYSTEM_USER_NAME -m $SYSTEM_USER_NAME;
    echo -e "${SYSTEM_USER_PASSWORD}\n${SYSTEM_USER_PASSWORD}\n" | passwd $SYSTEM_USER_NAME;
    good_print "Step 1 [Create user].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_nginx(){
    good_print "***INSTALL NGINX***";
    sleep 3;
    apt -y install nginx;
    if [[ 0 != $? ]]; then
        bad_print "install nginx failed";
        return 1;
    fi
    systemctl enable nginx;
    good_print "Step 2 [Install nginx].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

configuration_ufw(){
    good_print "***CONFIGURATION UFW***";
    sleep 3;
    ufw allow 'Nginx HTTP';
    if [[ "yes" == $INSTALL_SSL ]]; then 
        ufw allow 'Nginx HTTPS';
    fi
    ufw allow 20,21,990/tcp;
    ufw allow 40000:50000/tcp;   
    ufw allow in "OpenSSH";
    ufw_status=$(ufw status);

    if [[ $ufw_status != *"Status: active"* ]]; then
        good_print "To this question (Command may disrupt existing ssh connections. Proceed with operation (y|n)?) you can answer yes (y)";
        sleep 1;
        ufw enable;
    fi
    ufw status;
    good_print "Step 3 [Configuration UFW].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

nginx_health_check(){
    good_print "***NGINX HEALTTH CHEACK***";
    sleep 3;
    good_print "At this stage you can check the Apache. Make a request from the browser or through curl http://ip_addr:port or http://$MAIN_DOMAIN:port You should see the start page and the Apache server.";
    get_approval;
    good_print "Step 4 [Nginx health check].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_mysql(){
    good_print "***INSTALL MYSQL***";
    sleep 3;
    apt -y install mysql-server;
    if [[ 0 != $? ]]; then
        bad_print "install mysql failed";
        return 1;
    fi

    echo "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${MYSQL_ROOT_PASSWORD}';" | mysql

    good_print "We’re about to launch a security breach.";
    good_print "1. Enter the password you set for the root user in the previous step.";
    good_print "2. Plugin validation of your password is optional. That is the answer - N";
    good_print "3. If you are satisfied with the previously installed password for the root user, you do not need to change it. That is the answer - N":
    good_print "4. Anonymous user should be removed. That is the answer - Y";
    good_print "5. It is recommended to deny remote access. That is, the answer is - Y";
    good_print "6. The test database is better to delete. That is the answer - Y";
    good_print "7. It is recommended to reset all starting privileges. That is the answer - Y";

    get_approval;
    mysql_secure_installation;

    echo "CREATE USER '${MYSQL_ADMIN_USER}'@'localhost' IDENTIFIED WITH mysql_native_password BY '${MYSQL_ADMIN_PASSWORD}';" | mysql -u root -p${MYSQL_ROOT_PASSWORD};
    echo "GRANT ALL PRIVILEGES ON *.* TO '${MYSQL_ADMIN_USER}'@'localhost' WITH GRANT OPTION;" | mysql -u root -p${MYSQL_ROOT_PASSWORD};
    
    good_print "Step 5 [install Mysql].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_php(){
    good_print "***INSTALL PHP***";
    sleep 3;
    apt -y install php-fpm php-mysql;
    if [[ 0 != $? ]]; then
        bad_print "install php libapache2-mod-php php-mysql failed";
        return 1;
    fi

    apt -y install php-curl php-json php-cgi php-gd php-zip php-mbstring php-xml php-xmlrpc;
    if [[ 0 != $? ]]; then
        bad_print "install php-curl php-json php-cgi php-gd php-zip php-mbstring php-xml php-xmlrpc failed";
        return 1;
    fi
    good_print "Step 6 [install PHP].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

create_main_domain(){
    good_print "***CREATE MAIN DOMAIN***";
    sleep 3;

    files=$(ls /var/run/php/);
    for file in $files; do
        type=$(file /var/run/php/$file);
        type=${type#*: };
        if [[ "socket" == $type ]]; then
            php_fpm_sock=$file;
        fi
    done

    mkdir "/var/www/${MAIN_DOMAIN}";
    touch "/etc/nginx/sites-available/${MAIN_DOMAIN}.conf";
    cat << EOF > "/etc/nginx/sites-available/${MAIN_DOMAIN}.conf"
server {
    listen 80;

    root /var/www/${MAIN_DOMAIN};

    index index.php index.html;

    server_name ${MAIN_DOMAIN};

    error_log /var/log/nginx/${MAIN_DOMAIN}.error.log;
    access_log /var/log/nginx/${MAIN_DOMAIN}.access.log;

    location / {
        try_files \$uri \$uri/ /index.php?\$args;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/${php_fpm_sock};
    }

    location ~ /\.ht {
        deny all;
    }

    location ^~ /${PMA_HIDDEN_URI}/ {
        auth_basic "Admin Login";
        auth_basic_user_file /etc/nginx/pma_pass;

        location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/var/run/php/${php_fpm_sock};
        }
    }

}
EOF

    ln -s /etc/nginx/sites-available/${MAIN_DOMAIN}.conf /etc/nginx/sites-enabled/;
    unlink /etc/nginx/sites-enabled/default;
    systemctl reload nginx;
    nginx -t;
    sleep 3;

    sed -i 's/include \/etc\/nginx\/sites-enabled\/\*/include \/etc\/nginx\/sites-enabled\/*.conf/' /etc/nginx/nginx.conf;  
    systemctl reload nginx;
    good_print "Step 7 [Create main domain].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

create_sub_domain(){
    if [ -z ${SUBDOMAINS} ]; then
        return 1;
    else
        if [[ 0 < ${#SUBDOMAINS[@]} ]]; then 
            good_print "***CREATE SUB DOMAIN***";
            sleep 3;
        else
            return 1;    
        fi    
    fi

    for subdomain in ${SUBDOMAINS[*]}; do 
        mkdir "/var/www/$subdomain";
        touch "/etc/nginx/sites-available/${subdomain}.conf";
        cat << EOF > "/etc/nginx/sites-available/${subdomain}.conf"
server {
    listen 80;

    root /var/www/${subdomain};

    index index.php index.html;

    server_name ${subdomain};

    error_log /var/log/nginx/${subdomain}.error.log;
    access_log /var/log/nginx/${subdomain}.access.log;

    location / {
        try_files \$uri \$uri/ /index.php?\$args;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/${php_fpm_sock};
    }

    location ~ /\.ht {
        deny all;
    }

}
EOF

        ln -s /etc/nginx/sites-available/${subdomain}.conf /etc/nginx/sites-enabled/;
    done

    systemctl reload nginx;
    nginx -t;
    sleep 3;
    good_print "Step 8 [Create sub domain].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

test_php(){
    good_print "***TEST PHP***";
    sleep 3;
    touch "/var/www/$MAIN_DOMAIN/info.php";
    cat << EOF > "/var/www/$MAIN_DOMAIN/info.php"
<?php
phpinfo();
EOF
    good_print "Now you can check if php is working correctly. Query http://your_ip/info.php or http://$MAIN_DOMAIN/info.php";
    get_approval;
    rm "/var/www/$MAIN_DOMAIN/info.php";
    good_print "Step 9 [Test PHP].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

test_php_and_mysql(){
    good_print "***TEST PHP AND MYSQL***";
    sleep 3;

    echo "CREATE DATABASE example_database;" | mysql -u ${MYSQL_ADMIN_USER} -p${MYSQL_ADMIN_PASSWORD};
    echo "CREATE TABLE example_database.todo_list (item_id INT AUTO_INCREMENT,content VARCHAR(255),PRIMARY KEY(item_id));" | mysql -u ${MYSQL_ADMIN_USER} -p${MYSQL_ADMIN_PASSWORD};
    echo "INSERT INTO example_database.todo_list (content) VALUES ( \"My first important item is\");" | mysql -u ${MYSQL_ADMIN_USER} -p${MYSQL_ADMIN_PASSWORD};

    touch "/var/www/$MAIN_DOMAIN/todo_list.php";
    echo -e "<?php
    \$user = '${MYSQL_ADMIN_USER}';
    \$password = '${MYSQL_ADMIN_PASSWORD}';
    \$database = 'example_database';
    \$table = 'todo_list';" > "/var/www/$MAIN_DOMAIN/todo_list.php";

    echo -e 'try {
      $db = new PDO("mysql:host=localhost;dbname=$database", $user, $password);
      echo "<h2>TODO</h2><ol>";
      foreach($db->query("SELECT content FROM $table") as $row) {
        echo "<li>" . $row["content"] . "</li>";
      }
      echo "</ol>";
    } catch (PDOException $e) {
        print "Error!: " . $e->getMessage() . "<br/>";
        die();
    }' >> "/var/www/$MAIN_DOMAIN/todo_list.php";

    good_print "Now you can check if php and mysql are working correctly. Query http://your_ip/todo_list.php or http://$MAIN_DOMAIN/todo_list.php";
    get_approval;
    rm "/var/www/$MAIN_DOMAIN/todo_list.php";
    good_print "Step 10 [Test PHP and MySQL].\nStatus: normal.\n";
    sleep 5;
    return 0;

}

close_request_on_ip(){
    good_print "***REDIRECT FROM IP TO MAIN DOMAIN***";
    sleep 3;
    touch "/etc/nginx/sites-available/def.conf";
    cat << EOF > "/etc/nginx/sites-available/def.conf"                                         
server {
    listen 80 default_server;
    server_name _;
    return 403;
}
EOF
    ln -s /etc/nginx/sites-available/def.conf /etc/nginx/sites-enabled/def.conf;
    systemctl restart nginx;
    good_print "Step 11 [Redirect from ip to main domain].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_phpmyadmin(){
    good_print "***INSTALL PHPMYADMIN***";
    sleep 3;

    good_print "The installation of phpmyadmin will now be started";
    good_print "During the installation process, you will need to answer a few questions.";
    good_print "Here's a list of clues:";
    good_print "1. the system will ask you for which server to configure phpmyadmin. Just press Tab (without selecting either apache or lighttpd) and then OK.";
    good_print "2. Next, the installer will prompt to create a database for phpMyAdmin, which will contain the official information of the program and the necessary settings, you must agree to choose Yes:";
    good_print "Enter the password for the user phpmyadmin. You can use the same password as the ${PMA_ADMIN_USER} user.  Or any other password.";
    get_approval;
    apt -y install phpmyadmin;
    ln -s /usr/share/phpmyadmin /var/www/${MAIN_DOMAIN}/phpmyadmin;
    good_print "At this point, phpmyadmin is already available at http://your_ip/phpmyadmin or http://$MAIN_DOMAIN/phpmyadmin";
    get_approval;

    systemctl reload nginx;
    good_print "Step 12 [Install_phpmyadmin].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_wordpress_cli(){
    good_print "***INSTALL WORDPRESS CLI***";
    sleep 3;
    curl -L https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli.phar > /tmp/wp-cli.phar;
    chmod +x /tmp/wp-cli.phar;
    mv /tmp/wp-cli.phar /usr/bin/wp;
    good_print "Step 13 [Install wordpress cli].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_wordpress_for_main_domain(){
    good_print "***INSTALL WORDPRESS FOR MAIN DOMAIN***";
    sleep 3;
    
    cd /var/www/$MAIN_DOMAIN/;
    wp core download --force --allow-root;

    db_name=${MAIN_DOMAIN//./_};
    [ -f wp-config.php ] || wp config create --allow-root \
    --dbhost="localhost" \
    --dbname="${db_name}" \
    --dbuser="${MYSQL_ADMIN_USER}" \
    --dbpass="${MYSQL_ADMIN_PASSWORD}" \
    --dbprefix="${WP_DB_PREFIX}";
    
    echo "CREATE DATABASE ${db_name};" | mysql -u ${MYSQL_ADMIN_USER} -p${MYSQL_ADMIN_PASSWORD};

    wp core install --allow-root\
    --url="http://${MAIN_DOMAIN}" \
    --title="${WP_SITE_TITLE}" \
    --admin_user="${WP_ADMIN_USER}" \
    --admin_password="${WP_ADMIN_PASSWORD}" \
    --admin_email="${WP_ADMIN_EMAIL}" \
    --skip-email

    echo "define('FS_METHOD', 'direct');" >> wp-config.php;
    wp plugin delete akismet hello --allow-root;
    wp option update blogdescription "${WP_SITE_DESCRIPTION}" --allow-root
    wp rewrite structure "${WP_PERMALINK_STRUCTURE}" --allow-root;
    wp theme activate "${WP_THEME_NAME}" --allow-root;
    wp theme delete twentytwenty twentytwentytwo twentytwentythree --allow-root;

    chown -R "${SYSTEM_USER_NAME}:www-data" "/var/www/";
    chmod -R "g+w" "/var/www/";
    good_print "Step 14 [Install wordpress for main domain].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_wordpress_for_sub_domain(){
    if [ -z ${SUBDOMAINS} ]; then
        return 1;
    else
        if [[ 0 < ${#SUBDOMAINS[@]} ]]; then 
            good_print "***INSTALL WORDPRESS FOR SUB DOMAIN***";
            sleep 3;
        else
            return 1;    
        fi    
    fi

    for subdomain in ${SUBDOMAINS[*]}; do

        cd /var/www/$subdomain/;
        wp core download --force --allow-root;

        db_name=${subdomain//./_};
        [ -f wp-config.php ] || wp config create --allow-root \
        --dbhost="localhost" \
        --dbname="${db_name}" \
        --dbuser="${MYSQL_ADMIN_USER}" \
        --dbpass="${MYSQL_ADMIN_PASSWORD}" \
        --dbprefix="${WP_DB_PREFIX}";
    
        echo "CREATE DATABASE ${db_name};" | mysql -u ${MYSQL_ADMIN_USER} -p${MYSQL_ADMIN_PASSWORD};

        wp core install --allow-root \
        --url="http://${subdomain}" \
        --title="${WP_SITE_TITLE}" \
        --admin_user="${WP_ADMIN_USER}" \
        --admin_password="${WP_ADMIN_PASSWORD}" \
        --admin_email="${WP_ADMIN_EMAIL}" \
        --skip-email

        echo "define('FS_METHOD', 'direct');" >> wp-config.php;
        wp plugin delete akismet hello --allow-root;
        wp option update blogdescription "${WP_SITE_DESCRIPTION}" --allow-root
        wp rewrite structure "${WP_PERMALINK_STRUCTURE}" --allow-root;
        wp theme activate "${WP_THEME_NAME}" --allow-root;
        wp theme delete twentytwenty twentytwentytwo twentytwentythree --allow-root;

        chown -R "${SYSTEM_USER_NAME}:www-data" "/var/www/";
        chmod -R "g+w" "/var/www/";
    done
    good_print "Step 15 [Install wordpress for sub domain].\nStatus: normal.\n";
    sleep 5;
    return 0;
    #https://www.youtube.com/watch?v=VF3VvP9v0Y8
}

delete_unnecessary(){
    good_print "***DELETE UNNECESSARY***";
    sleep 3;
    rm -rf "/var/www/html";
    echo "DROP DATABASE IF EXISTS example_database;" | mysql -u ${MYSQL_ADMIN_USER} -p${MYSQL_ADMIN_PASSWORD};
    good_print "Step 16 [Delete unnecessary].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

basic_protection(){
    good_print "***BASIC PROTECTION***";
    sleep 3;
    
    #скрытый адрес для phpmyadmin и браузерная аутентификация 
    mv /var/www/${MAIN_DOMAIN}/phpmyadmin /var/www/${MAIN_DOMAIN}/${PMA_HIDDEN_URI};
    touch "/etc/phpmyadmin/conf.d/pma_secure.php";
    cat << EOF > "/etc/phpmyadmin/conf.d/pma_secure.php"
<?php

# PhpMyAdmin Settings
# This should be set to a random string of at least 32 chars
\$cfg['blowfish_secret'] = 'ra8pi36bl9yk0y2xn0py45sngg3x156k';

\$i=0;
\$i++;

\$cfg['Servers'][$i]['auth_type'] = 'cookie';
\$cfg['Servers'][$i]['AllowNoPassword'] = false;
\$cfg['Servers'][$i]['AllowRoot'] = false;

?>
EOF

    crypt=$(openssl passwd ${PMA_AUTH_PASS});
    touch "/etc/nginx/pma_pass";
    cat << EOF > "/etc/nginx/pma_pass"
${PMA_ADMIN_USER}:$crypt
EOF

    #если в директории нет файла по умолчанию то не показывать содержимое (directory listing)

    #не отображать версию nginx в консоли браузера
    sed -i 's/# server_tokens off;/server_tokens off;/' /etc/nginx/nginx.conf;
    systemctl restart nginx;

    good_print "Step 17 [Basic protection].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_vsftpd(){
    good_print "***INSTALL VSFTPD***";
    sleep 3;
    apt -y install vsftpd;
    systemctl enable vsftpd;
    cp /etc/vsftpd.conf /etc/vsftpd.conf.backup;
    sed -i 's/#write_enable=YES/write_enable=YES/g' /etc/vsftpd.conf;
    sed -i 's/#chroot_local_user=YES/chroot_local_user=YES/g' /etc/vsftpd.conf;
    sed -i 's/ssl_enable=NO/ssl_enable=YES/g' /etc/vsftpd.conf;
    sed -i 's/#local_umask=022/local_umask=022/g' /etc/vsftpd.conf;
    sed -i 's/#utf8_filesystem=YES/utf8_filesystem=YES/g' /etc/vsftpd.conf;

    cat << EOF >> "/etc/vsftpd.conf"
user_sub_token=$USER
local_root=/var/www
pasv_min_port=40000
pasv_max_port=50000
userlist_enable=YES
userlist_file=/etc/vsftpd.userlist
userlist_deny=NO
allow_writeable_chroot=YES
EOF

    echo "${SYSTEM_USER_NAME}" | tee -a /etc/vsftpd.userlist;
    systemctl restart vsftpd;

    good_print "Step 18 [Install vsftpd].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

add_user_in_additional_group(){
    good_print "***ADD USER IN ADDITIONAL GROUP***";
    sleep 3;
    usermod -a -G sudo,ftp,www-data $SYSTEM_USER_NAME;

    good_print "Step 19 [Add user in additional group].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_zabbix(){
    good_print "***INSATALL ZABBIX***";
    sleep 3;
    cd /tmp;
    wget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu22.04_all.deb;
    dpkg -i zabbix-release_6.0-4+ubuntu22.04_all.deb;
    apt update;
    apt -y install zabbix-server-mysql zabbix-frontend-php zabbix-nginx-conf zabbix-sql-scripts zabbix-agent;

    echo "create database zabbix character set utf8mb4 collate utf8mb4_bin;" | mysql -u ${MYSQL_ADMIN_USER} -p${MYSQL_ADMIN_PASSWORD};
    echo "create user zabbix@localhost identified by '${ZABBIX_PASSWORD}';" | mysql -u ${MYSQL_ADMIN_USER} -p${MYSQL_ADMIN_PASSWORD};
    echo "grant all privileges on zabbix.* to zabbix@localhost;" | mysql -u ${MYSQL_ADMIN_USER} -p${MYSQL_ADMIN_PASSWORD};
    echo "set global log_bin_trust_function_creators = 1;" | mysql -u ${MYSQL_ADMIN_USER} -p${MYSQL_ADMIN_PASSWORD};

    zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -uzabbix -p zabbix;

    echo "set global log_bin_trust_function_creators = 0;" | mysql -u ${MYSQL_ADMIN_USER} -p${MYSQL_ADMIN_PASSWORD};
    
    sed -i 's/# DBPassword=/DBPassword=${ZABBIX_PASSWORD}/g' /etc/zabbix/zabbix_server.conf;

    sed -i 's/#        listen          8080;/        listen 80;/g' /etc/zabbix/nginx.conf;
    sed -i 's/#        server_name     example.com;/         server_name zabbix.\${MAIN_DOMAIN};/g' /etc/zabbix/nginx.conf;

    systemctl restart zabbix-server zabbix-agent nginx php8.1-fpm;
    systemctl enable zabbix-server zabbix-agent nginx php8.1-fpm;
    systemctl restart nginx;

    good_print "Step 20 [Install zabbix].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

install_ssl(){
    #https://losst.pro/ustanovka-ssl-sertifikata-apache-ot-lets-encrypt
    #https://help.ubuntu.ru/wiki/apache_%D0%B8_https
    good_print "***INSTALL SSL***";
    sleep 3;
    if [[ "yes" != $INSTALL_SSL ]]; then
        echo "SSL will not be install";
        return 0;
    fi
    snap install core; 
    snap refresh core;
    snap install --classic certbot;
    certbot --nginx;

    good_print "Step 21 [Install ssl].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

create_backup_script(){
    good_print "***CREATE BACKUP SCRIPT***";
    sleep 3;
    touch /usr/local/bin/backup_cron2;
    chmod 775 /usr/local/bin/backup_cron2;
    cat << EOF > "/usr/local/bin/backup_cron2"
#!/bin/bash

### BAKCUP SITES  ###
DATE=\$(date +%Y-%m-%d_%H:%M:%S);
BACKUP_DIR="/tmp/site-backup/\${DATE}";
mkdir -p \$BACKUP_DIR;
zip -r \$BACKUP_DIR/scriptcraft.zip /var/www/scriptcraft.space;
zip -r \$BACKUP_DIR/dev.scriptcraft.zip /var/www/dev.scriptcraft.space;
zip -r \$BACKUP_DIR/stg.scriptcraft.zip /var/www/stg.scriptcraft.space;
zip -r /tmp/all.backup.sites.\$DATE.zip /tmp/site-backup/\${DATE};
scp /tmp/all.backup.sites.\$DATE.zip root@46.101.99.134:/root/backup/www;
rm -rf /tmp/all.backup.sites.\$DATE.zip; 

### BACKUP DB ###
BACKUP_DIR="/tmp/db-backup/\${DATE}";
mkdir -p \$BACKUP_DIR;
mysqldump --single-transaction -u adminer -h localhost -p${MYSQL_ADMIN_PASSWORD} scriptcraft_space > \$BACKUP_DIR/scriptcraft_space.sql;
mysqldump --single-transaction -u adminer -h localhost -p${MYSQL_ADMIN_PASSWORD} dev_scriptcraft_space > \$BACKUP_DIR/dev_scriptcraft_space.sql;
mysqldump --single-transaction -u adminer -h localhost -p${MYSQL_ADMIN_PASSWORD} stg_scriptcraft_space > \$BACKUP_DIR/stg_scriptcraft_space.sql;
mysqldump --single-transaction -u adminer -h localhost -p${MYSQL_ADMIN_PASSWORD} zabbix > \$BACKUP_DIR/zabbix.sql;
zip -r /tmp/all.backup.db.\$DATE.zip /tmp/db-backup/\${DATE};
scp /tmp/all.backup.db.\$DATE.zip root@46.101.99.134:/root/backup/www;
rm -rf /tmp/all.backup.db.\$DATE.zip;
EOF

    cat << EOF >> "/etc/crontab"
55 * * * * root /usr/local/bin/backup_cron
EOF

    good_print "Step 22 [Create backup script].\nStatus: normal.\n";
    sleep 5;
    return 0;
}

#**
#*RUN
#**
zero_step;
create_user;
install_nginx;
configuration_ufw;
nginx_health_check;
install_mysql;
install_php;
create_main_domain;
create_sub_domain;
test_php;
test_php_and_mysql;
close_request_on_ip;
install_phpmyadmin;
install_wordpress_cli;
install_wordpress_for_main_domain;
install_wordpress_for_sub_domain;
delete_unnecessary;
basic_protection;
install_vsftpd;
add_user_in_additional_group;
install_zabbix;
install_ssl;
create_backup_script;

cat << EOF
************
****DONE****
************
EOF

echo "
           ▄▄▄▄
           █░░█
           █░░█
           █░░░█
         █░░░░░█
███████▄▄█░░░░░██████▄
▓▓▓▓▓▓█░░░░░░░░░░░░░░█
▓▓▓▓▓▓█░░░░░░░░░░░░░░░█
▓▓ ${MAIN_DOMAIN} ░░░█
▓▓▓▓▓▓█░░░░░░░░░░░░░░█
▓▓▓▓▓▓█░░░░░░░░░░░░░░█
▓▓▓▓▓▓█████░░░░░░░░░█
██████▀░░░░▀▀█████▀ ";